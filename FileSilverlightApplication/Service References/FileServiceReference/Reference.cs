//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace FileSilverlightApplication.FileServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileServiceReference.IFileService")]
    public interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/DoWork", ReplyAction="http://tempuri.org/IFileService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(FileSilverlightApplication.FileServiceReference.DoWorkRequest request, System.AsyncCallback callback, object asyncState);
        
        FileSilverlightApplication.FileServiceReference.DoWorkResponse EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileService/UploadFile", ReplyAction="http://tempuri.org/IFileService/UploadFileResponse")]
        System.IAsyncResult BeginUploadFile(FileSilverlightApplication.FileServiceReference.UploadFileRequest request, System.AsyncCallback callback, object asyncState);
        
        FileSilverlightApplication.FileServiceReference.UploadFileResponse EndUploadFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IFileService/UploadStream")]
        System.IAsyncResult BeginUploadStream(FileSilverlightApplication.FileServiceReference.UploadStream request, System.AsyncCallback callback, object asyncState);
        
        void EndUploadStream(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DoWork", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DoWorkRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int x;
        
        public DoWorkRequest() {
        }
        
        public DoWorkRequest(int x) {
            this.x = x;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DoWorkResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DoWorkResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int DoWorkResult;
        
        public DoWorkResponse() {
        }
        
        public DoWorkResponse(int DoWorkResult) {
            this.DoWorkResult = DoWorkResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] FileContents;
        
        public UploadFileRequest() {
        }
        
        public UploadFileRequest(byte[] FileContents) {
            this.FileContents = FileContents;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadStream", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadStream {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] stream;
        
        public UploadStream() {
        }
        
        public UploadStream(byte[] stream) {
            this.stream = stream;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : FileSilverlightApplication.FileServiceReference.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FileSilverlightApplication.FileServiceReference.DoWorkResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FileSilverlightApplication.FileServiceReference.DoWorkResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FileSilverlightApplication.FileServiceReference.UploadFileResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FileSilverlightApplication.FileServiceReference.UploadFileResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<FileSilverlightApplication.FileServiceReference.IFileService>, FileSilverlightApplication.FileServiceReference.IFileService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadFileDelegate;
        
        private EndOperationDelegate onEndUploadFileDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadStreamDelegate;
        
        private EndOperationDelegate onEndUploadStreamDelegate;
        
        private System.Threading.SendOrPostCallback onUploadStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<DoWorkCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<UploadFileCompletedEventArgs> UploadFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadStreamCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileSilverlightApplication.FileServiceReference.IFileService.BeginDoWork(FileSilverlightApplication.FileServiceReference.DoWorkRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileSilverlightApplication.FileServiceReference.DoWorkResponse FileSilverlightApplication.FileServiceReference.IFileService.EndDoWork(System.IAsyncResult result) {
            return base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            FileSilverlightApplication.FileServiceReference.DoWorkRequest request = ((FileSilverlightApplication.FileServiceReference.DoWorkRequest)(inValues[0]));
            return ((FileSilverlightApplication.FileServiceReference.IFileService)(this)).BeginDoWork(request, callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            FileSilverlightApplication.FileServiceReference.DoWorkResponse retVal = ((FileSilverlightApplication.FileServiceReference.IFileService)(this)).EndDoWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new DoWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync(FileSilverlightApplication.FileServiceReference.DoWorkRequest request) {
            this.DoWorkAsync(request, null);
        }
        
        public void DoWorkAsync(FileSilverlightApplication.FileServiceReference.DoWorkRequest request, object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, new object[] {
                        request}, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileSilverlightApplication.FileServiceReference.IFileService.BeginUploadFile(FileSilverlightApplication.FileServiceReference.UploadFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileSilverlightApplication.FileServiceReference.UploadFileResponse FileSilverlightApplication.FileServiceReference.IFileService.EndUploadFile(System.IAsyncResult result) {
            return base.Channel.EndUploadFile(result);
        }
        
        private System.IAsyncResult OnBeginUploadFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            FileSilverlightApplication.FileServiceReference.UploadFileRequest request = ((FileSilverlightApplication.FileServiceReference.UploadFileRequest)(inValues[0]));
            return ((FileSilverlightApplication.FileServiceReference.IFileService)(this)).BeginUploadFile(request, callback, asyncState);
        }
        
        private object[] OnEndUploadFile(System.IAsyncResult result) {
            FileSilverlightApplication.FileServiceReference.UploadFileResponse retVal = ((FileSilverlightApplication.FileServiceReference.IFileService)(this)).EndUploadFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadFileCompleted(object state) {
            if ((this.UploadFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileAsync(FileSilverlightApplication.FileServiceReference.UploadFileRequest request) {
            this.UploadFileAsync(request, null);
        }
        
        public void UploadFileAsync(FileSilverlightApplication.FileServiceReference.UploadFileRequest request, object userState) {
            if ((this.onBeginUploadFileDelegate == null)) {
                this.onBeginUploadFileDelegate = new BeginOperationDelegate(this.OnBeginUploadFile);
            }
            if ((this.onEndUploadFileDelegate == null)) {
                this.onEndUploadFileDelegate = new EndOperationDelegate(this.OnEndUploadFile);
            }
            if ((this.onUploadFileCompletedDelegate == null)) {
                this.onUploadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileDelegate, new object[] {
                        request}, this.onEndUploadFileDelegate, this.onUploadFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileSilverlightApplication.FileServiceReference.IFileService.BeginUploadStream(FileSilverlightApplication.FileServiceReference.UploadStream request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadStream(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void FileSilverlightApplication.FileServiceReference.IFileService.EndUploadStream(System.IAsyncResult result) {
            base.Channel.EndUploadStream(result);
        }
        
        private System.IAsyncResult OnBeginUploadStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            FileSilverlightApplication.FileServiceReference.UploadStream request = ((FileSilverlightApplication.FileServiceReference.UploadStream)(inValues[0]));
            return ((FileSilverlightApplication.FileServiceReference.IFileService)(this)).BeginUploadStream(request, callback, asyncState);
        }
        
        private object[] OnEndUploadStream(System.IAsyncResult result) {
            ((FileSilverlightApplication.FileServiceReference.IFileService)(this)).EndUploadStream(result);
            return null;
        }
        
        private void OnUploadStreamCompleted(object state) {
            if ((this.UploadStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadStreamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadStreamAsync(FileSilverlightApplication.FileServiceReference.UploadStream request) {
            this.UploadStreamAsync(request, null);
        }
        
        public void UploadStreamAsync(FileSilverlightApplication.FileServiceReference.UploadStream request, object userState) {
            if ((this.onBeginUploadStreamDelegate == null)) {
                this.onBeginUploadStreamDelegate = new BeginOperationDelegate(this.OnBeginUploadStream);
            }
            if ((this.onEndUploadStreamDelegate == null)) {
                this.onEndUploadStreamDelegate = new EndOperationDelegate(this.OnEndUploadStream);
            }
            if ((this.onUploadStreamCompletedDelegate == null)) {
                this.onUploadStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadStreamCompleted);
            }
            base.InvokeAsync(this.onBeginUploadStreamDelegate, new object[] {
                        request}, this.onEndUploadStreamDelegate, this.onUploadStreamCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override FileSilverlightApplication.FileServiceReference.IFileService CreateChannel() {
            return new FileServiceClientChannel(this);
        }
        
        private class FileServiceClientChannel : ChannelBase<FileSilverlightApplication.FileServiceReference.IFileService>, FileSilverlightApplication.FileServiceReference.IFileService {
            
            public FileServiceClientChannel(System.ServiceModel.ClientBase<FileSilverlightApplication.FileServiceReference.IFileService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(FileSilverlightApplication.FileServiceReference.DoWorkRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public FileSilverlightApplication.FileServiceReference.DoWorkResponse EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                FileSilverlightApplication.FileServiceReference.DoWorkResponse _result = ((FileSilverlightApplication.FileServiceReference.DoWorkResponse)(base.EndInvoke("DoWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadFile(FileSilverlightApplication.FileServiceReference.UploadFileRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UploadFile", _args, callback, asyncState);
                return _result;
            }
            
            public FileSilverlightApplication.FileServiceReference.UploadFileResponse EndUploadFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                FileSilverlightApplication.FileServiceReference.UploadFileResponse _result = ((FileSilverlightApplication.FileServiceReference.UploadFileResponse)(base.EndInvoke("UploadFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadStream(FileSilverlightApplication.FileServiceReference.UploadStream request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UploadStream", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUploadStream(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UploadStream", _args, result);
            }
        }
    }
}
